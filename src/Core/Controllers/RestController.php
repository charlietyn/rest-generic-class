<?php
/**Generate by ASGENS
 * @author Charlietyn
 */

namespace Ronu\RestGenericClass\Core\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Http\JsonResponse;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Http\Request;
use Illuminate\Routing\Controller as BaseController;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Ronu\RestGenericClass\Core\Requests\BaseFormRequest;

class RestController extends BaseController
{
    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;

    protected $modelClass = "";


    /** @var Services $service */
    protected $service = "";

    /**
     * Logs the action being called if logging is enabled.
     *
     * @param string $method
     * @param array $parameters
     * @return mixed
     */
    public function callAction($method, $parameters)
    {
        $log = env('LOG_QUERY', false);
        if ($log)
            File::append(
                storage_path('/logs/query.log'),
                PHP_EOL . PHP_EOL . '--------Calling action ' . get_class($this) . ' method  ' . $method . ' ' . date('Y-m-d h:m:s a') . '------------' . PHP_EOL
            );
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    /**
     * Processes the incoming request and extracts query parameters.
     *
     * @param Request $request
     * @return array
     */
    public function process_request(Request $request): array
    {
        $parameters = [];
        $payloads = array_merge($request->query(), $request->request->all());
        array_key_exists('relations', $payloads) ? $parameters['relations'] = $request['relations'] : $parameters['relations'] = null;
        array_key_exists('_nested', $payloads) ? $parameters['_nested'] = $request['_nested'] : $parameters['_nested'] = false;
        array_key_exists('soft_delete', $payloads) ? $parameters['soft_delete'] = $request['soft_delete'] : $parameters['soft_delete'] = null;
        array_key_exists('attr', $payloads) ? $parameters['attr'] = $request['attr'] : $parameters['attr'] = null;
        array_key_exists('eq', $payloads) ? $parameters['attr'] = $request['eq'] : false;
        array_key_exists('select', $payloads) ? $parameters['select'] = $request['select'] : $parameters['select'] = "*";
        array_key_exists('pagination', $payloads) ? $parameters['pagination'] = $request['pagination'] : $parameters['pagination'] = null;
        array_key_exists('orderby', $payloads) ? $parameters['orderby'] = $request['orderby'] : $parameters['orderby'] = null;
        array_key_exists('oper', $payloads) ? $parameters['oper'] = $request['oper'] : $parameters['oper'] = null;
        return $parameters;
    }

    /**
     * Retrieves a paginated list of resources.
     *
     * @param Request $request
     * @return LengthAwarePaginator|array
     */
    public function index(Request $request): LengthAwarePaginator|array
    {
        $params = $this->process_request($request);
        return $this->service->list_all($params);
    }

    /**
     * Retrieves a single resource based on parameters.
     *
     * @param Request $request
     * @return array
     */
    public function getOne(Request $request): array
    {
        $params = $this->process_request($request);
        return $this->service->get_one($params);
    }

    /**
     * Validates a request and returns success response.
     *
     * @param BaseFormRequest $request
     * @return JsonResponse
     */
    public function actionValidate(BaseFormRequest $request): JsonResponse
    {
        return response()->json(['success' => true], 200);;
    }

    /**
     * Stores a new resource.
     *
     * @param BaseFormRequest $request
     * @return array
     */
    public function store(BaseFormRequest $request): array
    {
        DB::beginTransaction();
        try {
            $params = count($request->all()) != 0 ? $request->all() : json_decode($request->getContent(), true) ?? [];
            $result = $this->service->create($params);
            if ($result['success'])
                DB::commit();
        } catch (\Throwable $e) {
            DB::rollBack();
            throw $e;
        }
        return $result;
    }

    /**
     * Updates an existing resource.
     *
     * @param Request $request
     * @param int $id
     * @return mixed
     */
    public function update(Request $request, $id): mixed
    {
        DB::beginTransaction();
        try {
            $params = count($request->all()) != 0 ? $request->all() : json_decode($request->getContent(), true);
            $result = $this->service->update($params, $id);
            DB::commit();
        } catch (\Throwable $e) {
            DB::rollBack();
            throw $e;
        }
        return $result;
    }

    /**
     * Bulk update on resources at once.
     *
     * @param Request $request
     * @return mixed
     */
    public function updateMultiple(Request $request): mixed
    {
        DB::beginTransaction();
        try {
            $entity = strtolower($this->modelClass::MODEL);
            $params = $request->all()[$entity];
            $result = $this->service->update_multiple($params);
            if ($result['success'])
                DB::commit();
        } catch (\Throwable $e) {
            DB::rollBack();
            throw $e;
        }
        return $result;
    }

    /**
     * Retrieves a single resource by ID.
     *
     * @param Request $request
     * @param int $id
     * @return mixed
     */
    public function show(Request $request, $id): mixed
    {
        $params = $this->process_request($request);
        return $this->service->show($params, $id);
    }

    /**
     * Deletes a resource by ID.
     *
     * @param int $id
     * @return array
     */
    public function destroy($id): array
    {
        DB::beginTransaction();
        try {
            $result = $this->service->destroy($id);
            DB::commit();
        } catch (\Throwable $e) {
            DB::rollBack();
            throw $e;
        }
        return $result;
    }

    /**
     * Deletes multiple resources by IDs.
     *
     * @param Request $request
     * @return array
     */
    public function deleteById(Request $request): array
    {
        $params = count($request->all()) != 0 ? $request->all() : json_decode($request->getContent(), true);
        DB::beginTransaction();
        try {
            $result = $this->service->destroy_by_id($params);
            DB::commit();
        } catch (\Throwable $e) {
            DB::rollBack();
            throw $e;
        }
        return $result;
    }


    /**
     * Exports data to an Excel file.
     *
     * @param Request $request
     * @return mixed
     */
    public function export_excel(Request $request)
    {
        $params = $this->process_request($request);
        return $this->service->exportExcel($params);
    }

    /**
     * Exports data to a PDF file.
     *
     * @param Request $request
     * @return mixed
     */
    public function export_pdf(Request $request)
    {
        $params = $this->process_request($request);
        return $this->service->exportPdf($params);
    }
}






